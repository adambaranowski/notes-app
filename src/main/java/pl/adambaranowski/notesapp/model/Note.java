package pl.adambaranowski.notesapp.model;

import javax.persistence.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Java Bean model of single Note for Hibernate. Contains
 * constructors, getters and setters.
 *
 * @author Adam Baranowski
 */
@Entity
public class Note implements Serializable {

    /**
     * Database main key - autogenerated by database engine
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Title of note, the same for all versions of given note
     */
    private String title;

    /**
     * If "deleted" is set to true, given note is not returned
     * in Note API. However, it is always returned in ArchiveAPI
     */
    private boolean deleted = false;


    /**
     * Collection of all versions of given note. Thanks to Hibernate CascadeOperations,
     * performing any CRUD method for Note means that the same method
     * will be applied fot NoteVersion.
     * NoteVersion is the owner of the relationship
     */
    @OneToMany(mappedBy = "note", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    private List<NoteVersion> noteVersions = new ArrayList<>();


    public Note(String title) {
        this.title = title;
    }

    public Note() {
    }

    public Note(String title, boolean deleted, List<NoteVersion> noteVersions) {
        this.title = title;
        this.deleted = deleted;
        this.noteVersions = noteVersions;
    }

    /**
     * @return last created NoteVersion of Note
     */
    public NoteVersion getRecentVersion() {
        return noteVersions.get(noteVersions.size() - 1);
    }

    /**
     * @return first NoteVersion of Note
     */
    public NoteVersion getFirstVersion() {
        return noteVersions.get(0);
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public List<NoteVersion> getNoteVersions() {
        return noteVersions;
    }

    public void setNoteVersions(List<NoteVersion> noteVersions) {
        this.noteVersions = noteVersions;
    }
}
